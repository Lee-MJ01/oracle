/*
    날짜 : 2025/07/21
    이름 : 이민준
    내용 : SQL 연습문제2
*/

-- 실습 2-2
create table student(
    stdNo char(8) primary key,
    name varchar(20) not null,
    birth date not null,
    major varchar(20),
    enr_date date not null
    );
    
create table course(
    cs_id number(4) primary key,
    cs_name varchar(20) not null,
    cs_credit number(1) not null,
    cs_ccept varchar(20)
    );
    
create table enrollment(
    enr_no number generated by default as identity primary key,
    enr_stdno varchar(20) not null,
    enr_csid number(4),
    mid_score number(20),
    final_score number,
    total_score number,
    grade char(1)
    );  
    
-- 실습 2-3
insert into student values('20121016','김유신','1991-01-13','국문학과','2012-02-01');
insert into student values('20111126','김춘추','1992-04-11','경제학과','2011-02-01');
insert into student values('20100216','장보고','1991-05-23','컴퓨터학과','2010-02-01');
insert into student values('20120326','강감찬','1991-02-09','영문학과','2012-02-01');
insert into student values('20130416','이순신','1992-11-30','경영학과','2012-02-01');
insert into student values('20110521','송상현','1992-07-17','컴퓨터학과','2011-02-01');

insert into course values(1059,'고전문학',3,'국문학과');
insert into course values(2312,'데이터베이스',3,'컴퓨터학과');
insert into course values(1203,'Easy Writing',3,'영문학과');
insert into course values(2039,'글로벌경제학',3,'경제학과');
insert into course values(2301,'프로그래밍언어',3,'컴퓨터학과');
insert into course values(2303,'컴퓨터과학 개론',2,'컴퓨터학과');
insert into course values(3012,'마케팅 전략',2,'경제학과');

insert into enrollment(enr_stdno, enr_csid) values('20111126', 1203);
insert into enrollment(enr_stdno, enr_csid) values('20121016', 2301);
insert into enrollment(enr_stdno, enr_csid) values('20121016', 2303);
insert into enrollment(enr_stdno, enr_csid) values('20111126', 2039);
insert into enrollment(enr_stdno, enr_csid) values('20100216', 3012);
insert into enrollment(enr_stdno, enr_csid) values('20120326', 3012);
insert into enrollment(enr_stdno, enr_csid) values('20121016', 2312);
insert into enrollment(enr_stdno, enr_csid) values('20130416', 3012);

-- 실습 2-4
select * from student where major = '컴퓨터학과';

-- 실습 2-5
select * from course where cs_dept = '컴퓨터학과';

-- 실습 2-6
select enr_no, enr_stdno, enr_csid, mid_score, final_score, total_score, grade
from student s join enrollment e on s.stdno = e.enr_stdno
where s.name = '김유신';

-- 실습 2-7
select name, major, enr_date
from student
where major = '국문학과';

-- 실습 2-8
select cs_id, cs_name, cs_credit, cs_dept
from course
where cs_dept = '컴퓨터학과' and cs_credit >=2;

-- 실습 2-9
select stdno, name, birth
from student
where birth >= '1992-01-01';

-- 실습 2-10
update enrollment set mid_score = 36, final_score = 42
where enr_stdno = '20111126' and enr_csid = 1203;

update enrollment set mid_score = 24, final_score = 62
where enr_stdno = '20121016' and enr_csid = 2301;

update enrollment set mid_score = 28, final_score = 40
where enr_stdno = '20121016' and enr_csid = 2303;

update enrollment set mid_score = 37, final_score = 57
where enr_stdno = '20111126' and enr_csid = 2039;

update enrollment set mid_score = 28, final_score = 68
where enr_stdno = '20100216' and enr_csid = 3012;

update enrollment set mid_score = 16, final_score = 65
where enr_stdno = '20120326' and enr_csid = 3012;

update enrollment set mid_score = 18, final_score = 58
where enr_stdno = '20121016' and enr_csid = 2312;

update enrollment set mid_score = 25, final_score = 58
where enr_stdno = '20130416' and enr_csid = 3012;

select * from enrollment;

-- 실습 2-11
update enrollment set total_score = mid_score + final_score,
grade =
case
    when(mid_score + final_score) >= 90 then 'A'
    when(mid_score + final_score) >= 80 then 'B'
    when(mid_score + final_score) >= 70 then 'C'
    when(mid_score + final_score) >= 60 then 'D'
    else 'F'
end;

select * from enrollment;

-- 실습 2-12
select * from enrollment
order by total_score desc;

-- 실습 2-13
select * from enrollment
where enr_csid = 3012
order by total_score desc;

-- 실습 2-14
select cs_id, cs_name
from course
where cs_name in('데이터베이스','프로그래밍언어');
// cs_name = '데이터베이스' or cs_name = '프로그래밍언어';

-- 실습 2-15
select cs_name, cs_dept
from course;

-- 실습 2-16
select stdno, name
from student
order by name;

-- 실습 2-17
select distinct(enr_stdno)
from enrollment;

-- 실습 2-18
select max(total_score) as 가장_큰_총점
from enrollment;

-- 실습 2-19
select major, count(*) as 학생수
from student
group by major;

-- 실습 2-20
select enr_csid, count(*) as 수강_학생수
from enrollment
group by enr_csid
HAVING count(*) >= 2;

-- 실습 2-21
select stdno, name, major, enr_csid, mid_score, final_score, total_score, grade
from Student s
left join enrollment e
on s.stdno = e.enr_stdno;

-- 실습 2-22
select name, stdno, enr_csid
from student s
join enrollment e
on s.stdno = e.enr_stdno
where enr_csid = 3012;

-- 실습 2-23
select stdno, name, count(stdno) as 수강신청_건수,
sum(Total_Score) as 종합점수,
round(sum(Total_Score) / count(stdno)) as 평균
from student s
join enrollment e on s.stdno = e.enr_stdno
group by stdno, name
order by stdno;

-- 실습 2-24
select enr_no, enr_stdno, cs_id, cs_name, cs_credit
from enrollment e
join course c on e.enr_csid = c.cs_id;

-- 실습 2-25
select count(*) as 마케팅_전략_수강_신청건수,
trunc(avg(total_score),5) as 마케팅_전략_평균
from enrollment e
join course c on e.enr_csid = c.cs_id
where c.cs_name = '마케팅 전략';

-- 실습 2-26
select enr_stdno, cs_name
from enrollment e
join course c
on e.enr_csid = c.cs_id
where grade = 'A';

-- 실습 2-27
select stdno, name, major, enr_csid, cs_credit, total_score, grade
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id;

-- 실습 2-28
select stdno, name, cs_name, total_score, grade
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id
where grade = 'F';

-- 실습 2-29
select stdno, name,sum(cs_credit) as 이수학점
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id
where grade != 'F'
group by stdno, name;

-- 실습 2-30
select s.stdno, s.name, s.major
from student s
where s.stdno not in(
select enr_stdno
from enrollment
);


